Assignment Solution for Searching, Sorting and Number System


Searching-


Question 1 -
public class Q1linearSearch
{
   public static void main(String[] args) {
       int []arr={4,61,1,7,41,6,243,7,2};
       int n=41;
       int index=-1;
       for(int i=0;i<arr.length; i++){
           if(arr[i]==n){
               index=i;
               break;
           }
       }
       if(index==-1){
           System.out.println("Element is not found");
       }else{
           System.out.println("element is found at index :"+index);


       }
   }
}




Question 2-


import java.util.*;
public class Q2LastOccurence
{
   public static void main(String[] args)
   {
       int [] arr={1,4,5,5,7,7,9,10};
       int target=7;
       int out=upperbound(arr,target);
       System.out.println(out);
   }
   public static int upperbound(int [] arr , int target){
       int low=0;
       int high=arr.length-1;
       int result=-1;
       while(low<=high){
           int mid=low+(high-low)/2;
           if(arr[mid]==target){
               result=mid;
               low=mid+1;
           } else if (arr[mid]>target) {
               high=mid-1;
           }else {
               low=mid+1;
           }
       }return result;
   }
}




Question 3-


public class Q3NumberOf1s {
   public static void main(String[] args) {
       int[] arr = {0,0,0,1,1,1};
       System.out.println("Total number of 1's: " + totalOnes(arr));
   }


   private static int totalOnes(int[] arr) {
       int n = arr.length;
       int ans = 0;
       //traversing through array
       for (int i = 0; i < arr.length; i++) {
           //found 1 in array for the first time
           if (arr[i] == 1) {
               ans = n - i;
               break; // exit from loop as we found answer
           }
       }


       return ans;


   }
}


Question 4-


import java.io.*;
import java.util.*;
public class Q4occurences
{
   public static void main(String args[])
   {
       int []arr={2,5,6,7,7,7,7,7,8,9};
       int target=7;
       int result=highervalue(arr,target)-lowervalue(arr,target)+1;
       System.out.println(result);
   }
   public static int lowervalue(int []arr, int target)
   {
       int low=0;
       int high=arr.length-1;
       int result=-1;
       while (low<=high) {
           int mid = low + (high - low) / 2;
           if (arr[mid] == target) {
               result = mid;
               high = mid - 1;
           } else if (arr[mid] > target) {
               high = mid -1;
           } else {
               low = mid+1;
           }
       }return result;
   }
   public static int highervalue(int []arr, int target)
   {
       int low=0;
       int high=arr.length-1;
       int result=-1;
       while (low<=high) {
           int mid = low + (high - low) / 2;
           if (arr[mid] == target) {
               result = mid;
               low = mid + 1;
           } else if (arr[mid] > target) {
               high = mid - 1;
           } else {
               low = mid + 1;
           }
       }return result;
   }
}


Question 5-
public class Q5perfectSquare {


   public static boolean perfectSquare(int num) {
       if (num < 0) {
           return false;  // Negative numbers are not perfect squares
       }


       int low = 0;
       int high = num;


       while (low <= high) {
           long mid = low + (high - low) / 2;  // Use long to avoid integer overflow
           long square = mid * mid;
           if (square == num) {
               return true;  // Found the perfect square
           } else if (square > num) {
               high = (int)mid - 1;  // Adjust high for the next iteration
           } else {
               low = (int)mid + 1;  // Adjust low for the next iteration
           }
       }


       return false;  // If no perfect square was found
   }


   public static void main(String[] args) {
       int num = 15;
       System.out.println(perfectSquare(num));
   }
}




Sorting-


Question 1-
import java.util.Arrays;
//bubble sort, to sort an array in decreasing order just change the comparing size > to this < and < to>
//time complexity in bubble, selection, insertion sort=O(n^2);
//and space complexity is O(1);
public class Q1bubbleDecresing
{
   public static void main(String[] args)
   {
       int[] arr={34,6,1,676,325,8,32,56,76};
       bubblesort(arr);
       System.out.println(Arrays.toString(arr));
   }
   public static void bubblesort(int []arr)
   {
       boolean  swapped=false;
       for(int i=0; i<arr.length; i++){
           for(int j=0; j<arr.length-i-1; j++){
               if(arr[j]<arr[j+1]){
                   int temp=arr[j];
                   arr[j]=arr[j+1];
                   arr[j+1]=temp;
                   swapped=true;
               }
           }
           if(!swapped){
               break;
           }
       }
   }
}


Question 2-
import java.util.Arrays;
//selection sort,,
public class main
{
   public static void main(String[] args) {
       int []arr={64,13,76,34,21,87,11,4,87};
       selectionSort(arr);
       System.out.println(Arrays.toString(arr));
   }
   public static void selectionSort(int []arr){
       for(int i=0; i<arr.length; i++){
           int min_idx=i;
           for(int j=i+1; j<arr.length; j++){
               if(arr[j]<arr[min_idx]){
                   min_idx=j;
               }
           }
           if(min_idx!=i){
               int temp=arr[min_idx];
               arr[min_idx]=arr[i];
               arr[i]=temp;
           }
       }
   }
}


Question 3-


import java.util.Arrays;


public class Q3InsertionSort
{
   public static void main(String[] args)
   {
       int []arr={25,62,8,1,34,65,34};
       insertionSort(arr);
       System.out.println(Arrays.toString(arr));
   }
   static void insertionSort(int []arr){
       for(int i=0; i<arr.length; i++){
           int j=i;
           while(j>0 && arr[j]<arr[j-1]){
               int temp=arr[j];
               arr[j]=arr[j-1];
               arr[j-1]=temp;
               j--;
           }
       }
   }
}